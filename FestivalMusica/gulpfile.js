import fs from 'fs';              // M칩dulo para trabajar con archivos
import path from 'path';          // M칩dulo para manejar rutas de archivos
import sharp from 'sharp';        // Librer칤a para procesar im치genes (redimensionar, comprimir, etc.)
import { glob } from 'glob';

// Importa funciones principales de Gulp: src (origen de archivos), dest (destino), watch (vigilar cambios), series (ejecutar tareas en orden)
import { src, dest, watch, series } from 'gulp';

// Importa todas las funciones del compilador oficial de Sass (Dart Sass)
import * as dartSass from 'sass';

// Importa el plugin gulp-sass, que permite a Gulp trabajar con archivos .scss
import gulpSass from 'gulp-sass';

// Conecta gulp-sass con Dart Sass para poder compilar Sass
const sass = gulpSass(dartSass);

// terser es una libreria de terceros para minificar codigo de js
import terser from 'gulp-terser';



// Tarea para copiar archivos JavaScript
// La funci칩n 'js' copia el archivo 'app.js' desde 'src/js' a 'build/js'
// 'done()' indica que la tarea ha terminado correctamente
export function js( done ) {
    src('src/js/app.js')         // Ubica el archivo JavaScript de origen
        .pipe(terser())
        .pipe( dest('build/js')); // Copia el archivo al destino

    done(); // Finaliza la tarea
};


// Tarea para compilar archivos Sass a CSS
// La funci칩n 'css' busca el archivo SCSS, lo compila y lo guarda como CSS
export function css( done ) {
    src('src/scss/app.scss', { sourcemaps: true }) // Ubica el archivo .scss y activa los sourcemaps
        .pipe( sass({
          // minifica el codigo de css haciendolo mas ligero
           style:'compressed'
        }).on('error', sass.logError) )  // Compila Sass y muestra errores si hay
        .pipe( dest('build/css', { sourcemaps: '.' })); // Guarda el archivo CSS compilado en la carpeta destino con sourcemaps

    done(); // Finaliza la tarea
};


// Funci칩n que se queda "escuchando" cambios en archivos SCSS o JS
// Si hay cambios, vuelve a ejecutar la tarea correspondiente autom치ticamente
export function dev() {
    watch('src/scss/**/*.scss', css); // Observa todos los archivos .scss dentro de la carpeta y subcarpetas
    watch('src/js/**/*.js', js);      // Observa todos los archivos .js dentro de la carpeta y subcarpetas
    watch('src/img/**/*.{png,jpg}', imagenes);
};



// Funci칩n principal que realiza el proceso de redimensionar im치genes
export async function crop(done) {
    
    // 游늬 Carpeta de entrada: donde est치n tus im치genes grandes (FULL)
    // 游녤 Puedes cambiar esto seg칰n el proyecto
    const inputFolder = 'src/img/gallery/full';

    // 游늬 Carpeta de salida: donde se guardar치n las im치genes peque침as (THUMB)
    // 游녤 Puedes cambiar esto tambi칠n
    const outputFolder = 'src/img/gallery/thumb';

    // 游늻 Tama침o deseado para las miniaturas
    // 游녤 Puedes modificar ancho y alto seg칰n tus necesidades
    const width = 250;
    const height = 180;

    // Verifica si la carpeta de salida existe, si no, la crea
    if (!fs.existsSync(outputFolder)) {
        fs.mkdirSync(outputFolder, { recursive: true }); // Crea carpeta y subcarpetas si no existen
    };

    // Lee todos los archivos en la carpeta de entrada y filtra solo los que terminan en .jpg
    // 游녤 Puedes agregar m치s extensiones si quieres aceptar .png, .jpeg, etc.
    const images = fs.readdirSync(inputFolder).filter(file => {
        return /\.(jpg)$/i.test(path.extname(file)); // Solo archivos .jpg
    });

    try {
        // Recorre todas las im치genes encontradas
        images.forEach(file => {
            const inputFile = path.join(inputFolder, file);     // Ruta completa de la imagen original
            const outputFile = path.join(outputFolder, file);   // Ruta donde se guardar치 la miniatura

            // Usa SHARP para redimensionar la imagen
            sharp(inputFile)
                .resize(width, height, {
                    position: 'centre' // Posiciona el recorte desde el centro (puedes cambiarlo a 'top', 'bottom', etc.)
                })
                .toFile(outputFile); // Guarda la nueva imagen redimensionada
        });

        // Llama a 'done' cuando termina todo el proceso (칰til si lo usas con Gulp)
        done();

    } catch (error) {
        // Muestra cualquier error que ocurra durante el proceso
        console.log(error);
    };
};


// Funci칩n principal: procesa todas las im치genes encontradas
export async function imagenes(done) {
    // === 丘뙖잺 CONFIGURACI칍N QUE PUEDES CAMBIAR ===
    const srcDir = './src/img';       // 游늬 Carpeta donde est치n las im치genes originales
    const buildDir = './build/img';   // 游늬 Carpeta de salida para im치genes optimizadas

    // Busca recursivamente todas las im치genes .jpg y .png en la carpeta srcDir
    const images = await glob('./src/img/**/*.{jpg,png}'); // Puedes agregar otros formatos si quieres

    // Procesa cada imagen encontrada
    images.forEach(file => {
        const relativePath = path.relative(srcDir, path.dirname(file)); // Ruta relativa
        const outputSubDir = path.join(buildDir, relativePath);         // Carpeta destino
        procesarImagenes(file, outputSubDir); // Llama a la funci칩n que hace el trabajo
    });

    // Informa que ha terminado el proceso (si se usa con Gulp, por ejemplo)
    done();
};

// Funci칩n que procesa una sola imagen: genera versi칩n optimizada y .webp
function procesarImagenes(file, outputSubDir) {
    // Si la carpeta destino no existe, la crea
    if (!fs.existsSync(outputSubDir)) {
        fs.mkdirSync(outputSubDir, { recursive: true });
    };

    // Saca el nombre base y la extensi칩n original del archivo
    const baseName = path.basename(file, path.extname(file)); // ejemplo: "foto1"
    const extName = path.extname(file);                       // ejemplo: ".jpg"

    // Crea rutas completas de salida
    const outputFile = path.join(outputSubDir, `${baseName}${extName}`);      // versi칩n optimizada original
    const outputFileWebp = path.join(outputSubDir, `${baseName}.webp`);       // versi칩n WebP
    const outputFileAvif = path.join(outputSubDir, `${baseName}.avif`);       // versi칩n WebP
    

    // Opciones de compresi칩n/calidad (ajustables)
    const options = { quality: 80 }; // Puedes bajar la calidad si quieres menor peso

    // Procesa imagen en su formato original (optimizado)
    sharp(file)
        .resize({ // 游녤 Puedes quitar esto si no quieres cambiar el tama침o
            width: 1200, // Ancho deseado (puedes cambiarlo)
            withoutEnlargement: true // No agranda im치genes m치s peque침as
        })
        .toFormat('jpeg', options)
        .toFile(outputFile);

    // Crea versi칩n en WebP
    sharp(file)
        .resize({
            width: 1200,
            withoutEnlargement: true
        })
        .webp(options)
        .toFile(outputFileWebp);

    // Crea versi칩n en avif
    sharp(file)
        .resize({
            width: 1200,
            withoutEnlargement: true
        })
        .avif()
        .toFile(outputFileAvif);
};




// Exporta la tarea por defecto
// Ejecuta en orden: primero js, luego css y luego inicia el modo de desarrollo con 'watch'
export default series(crop, js, css, imagenes, dev);
